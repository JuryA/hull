# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: RunTests
  default: true
- name: HelmVersions
  type: object
  default:
  - name: "v3_0"
    value:
    - name: "version"
      value: "3.0.0"

trigger: none

pool:
    vmImage: 'ubuntu-20.04'

jobs:
- job: RunTests
  strategy:
    maxParallel: 10
    matrix: 
      3_0:
        HelmMajorVersion: 3
        HelmMinorVersion: 0
        HelmPatchVersionEnd: 3
#          value: 
 #         - version: "3.0.0"
  #       - version: "3.0.1"
  #       - version: "3.0.2"
  #       - version: "3.0.3"
  #    3_1:
  #      HelmVersions: 
   #     - version: "3.1.0"
   #     - version: "3.1.1"
   #     - version: "3.1.2"
   #     - version: "3.1.3"        
   #   3_2:
  #      HelmVersions: 
   #     - version: "3.2.0"
   #     - version: "3.2.1"
  #      - version: "3.2.2"
  #      - version: "3.2.3"
  #      - version: "3.2.4"
  #    3_3:
  #      HelmVersions: 
  #      - version: "3.3.0"
  #      - version: "3.3.1"
  #      - version: "3.3.2"
 #       - version: "3.3.3"
  #      - version: "3.3.4"
 #     3_4:
 #       HelmVersions: 
 #       - version: "3.4.0"
 #       - version: "3.4.1"
 #       - version: "3.4.2"
#      3_5:
 #       HelmVersions: 
#        - version: "3.5.0"
#        - version: "3.5.1"
 #       - version: "3.5.2"
#        
  steps:
  - powershell: |
      
      $Versions = @()
      for ($i=0; $i -le $(HelmPatchVersionEnd); $i++) 
      {
        $version = "$(HelmMajorVersion).$(HelmMinorVersion).$($i)"
        Write-Host $version
        $Versions += $version
      }
      
      $VersionsJson = $Versions | ConvertTo-Json
      Write-Host "##vso[task.setvariable variable=$VersionsJson;isOutput=true]$VersionsJson"
    
  - template: azure-pipelines-test.yml  # Template reference
    parameters:
      HelmVersions: ${{ variables['VersionsJson'] }}
